{"version":3,"sources":["components/Nav/NavHistoryColor.js","components/Nav/Nav.js","components/ColorCell/ColorCell.js","components/Modals/ModalSettings.js","components/Utils/Colors.js","components/Utils/URL.js","ColorSorter.js","components/ColorCell/ColorSort.js","components/Utils/Utils.js","serviceWorker.js","index.js","initialState.js"],"names":["NavHistoryColor","props","setClipboardColor","color","className","style","backgroundColor","hexVal","onClick","Nav","colorsHistory","setIsSettingsModalOpen","map","i","key","ColorCell","name","Modal","setAppElement","ModalSettings","isSettingsModalOpen","session","setSession","setUrlParams","settings","colorsTextArea","useRef","seperateKeysFromValues","colorsArr","params","URLSearchParams","value","match","set","toString","window","history","replaceState","decodeURIComponent","location","pathname","replaceURLState","isOpen","overlay","contentLabel","htmlFor","type","id","defaultChecked","hex","checked","readOnly","disabled","rgb","placeholder","ref","text","current","replace","trim","matchedArr","length","ColorSorter","previousSession","useState","urlParams","colorsArray","setColorsArray","clipboardColor","setColorsHistory","isCopyActive","setIsCopyActive","isCopyActiveClass","useEffect","search","localStorage","setItem","JSON","stringify","formattedColors","forEach","push","colorObj","r","parseInt","substring","g","b","max","Math","apply","min","chr","hue","val","sat","chroma","luma","red","green","blue","constructColor","sort","a","copyText","animateCopiedText","setTimeout","updateColorsHistory","tempColorsHistory","navigator","clipboard","textArea","document","createElement","body","appendChild","focus","select","msg","execCommand","console","log","err","error","removeChild","fallbackCopyTextToClipboard","writeText","then","alert","Boolean","hostname","parse","getItem","localStorageName","lastSession","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f52ea91e.chunk.js","sourcesContent":["import React from 'react';\n\nexport const NavHistoryColor = ({ ...props }) => {\n  const { setClipboardColor, color } = props;\n\n  const handleColorClick = () => {\n    setClipboardColor(color);\n  }\n\n  return (\n    <li className=\"nav__li nav__color\"\n      style={{\n        backgroundColor: `#${color.hexVal}`,\n      }}\n      onClick={handleColorClick} >\n      {color.hexVal}\n    </li>\n  );\n}\n\nexport default NavHistoryColor;\n","import React from 'react';\nimport NavHistoryColor from './NavHistoryColor';\n\nexport const Nav = ({ ...props }) => {\n  const { setClipboardColor, colorsHistory, setIsSettingsModalOpen } = props;\n\n  const handleSettingsClick = () => {\n    setIsSettingsModalOpen(true);\n  };\n\n  return (\n    <nav className=\"nav l-flex l-align-center\">\n      <ul className=\"nav__ul l-flex\">\n        {colorsHistory && colorsHistory.map((color, i) => {\n          return <NavHistoryColor\n            key={i}\n            color={color}\n            setClipboardColor={setClipboardColor}\n          />\n        })}\n        <li className=\"nav__li nav__li-settings\" onClick={handleSettingsClick}>\n          <i className=\"nav__li-settings--icon\"></i>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nexport const ColorCell = ({ ...props }) => {\n  const { color, setClipboardColor } = props;\n\n  const handleClick = () => {\n    setClipboardColor(color);\n  }\n\n  return (\n    <div className=\"c-color-grid__item l-flex l-absolute-center\"\n      onClick={handleClick}\n      style={{\n        backgroundColor: `#${color.hexVal}`,\n      }}>\n      <span className=\"c-color-grid__item-text\"\n      >{color.name}</span>\n    </div >\n  );\n}\n\nexport default ColorCell;\n","import React, { useRef } from 'react';\nimport Modal from 'react-modal';\nimport { replaceURLState } from '../Utils/URL';\nimport { hexOrRgbMatch, sassVarMatch } from '../Utils/Colors';\n\nModal.setAppElement('#root');\n\nexport const ModalSettings = ({ ...props }) => {\n  const { isSettingsModalOpen, setIsSettingsModalOpen, session, setSession, setUrlParams } = props;\n  const { settings } = session;\n  const colorsTextArea = useRef();\n\n  const toggleModal = () => {\n    setIsSettingsModalOpen(!isSettingsModalOpen);\n  }\n\n  const handleGenerateClick = () => {\n    const text = colorsTextArea.current.value.replace(/[\\n\\r]+/g, '').replace(/\\s+/g, '').trim();\n    const regExArr = [\n      /\\$(.+?):(.+?);/g, // sassVarAndValueRegex\n      // /\\#\\w{1,8}[;,]/g, // hexCommaRegex\n      // /&\\w+[=]\\w+/g, // queryStringRegex\n    ];\n\n    /*\n      1. Loop through regex array, most general to most specific order of regex querying\n      2. attempt to match the current type of regex\n      3. if values are found, massage the array for the type of regex\n    */\n\n    regExArr.map((value, i) => {\n      const matchedArr = text.match(value);\n      if (matchedArr.length > 0) {\n        switch (i) {\n          case 0:\n            // sassVarAndValueRegex\n            seperateKeysFromValues(matchedArr);\n            break;\n          case 1:\n            // hexCommaRegex\n            break;\n          case 2:\n            // queryStringRegex\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  }\n\n  const seperateKeysFromValues = (colorsArr) => {\n    const params = new URLSearchParams();\n\n    colorsArr.map((value, i) => {\n      let color = hexOrRgbMatch(value);\n      let name = sassVarMatch(value);\n      params.set(name, color);\n    });\n\n    setUrlParams(params);\n    replaceURLState(params);\n    setIsSettingsModalOpen(false);\n  }\n\n  return (\n    <Modal\n      isOpen={isSettingsModalOpen}\n      // onAfterOpen={afterOpenModal}s\n      // onRequestClose={closeModal}\n      style={{\n        overlay: {\n          backgroundColor: 'transparent',\n        }\n      }}\n      contentLabel=\"Example Modal\"\n      className=\"c-modal c-modal-settings\"\n    >\n      <div className=\"c-modal__overlay\">\n        <button className=\"c-modal__close-button\" onClick={toggleModal}>close</button>\n        <div className=\"c-modal__content-container\">\n          <h2 className=\"c-heading c-heading--h1\">Settings</h2>\n\n          <h3 className=\"c-heading c-heading--h2\">Color Type to Copy</h3>\n          <div className=\"c-modal-settings__settings-group\">\n            <label className=\"c-modal-settings__label\" htmlFor=\"c-modal-settings__check-hex\">Hex</label>\n            <input type=\"checkbox\"\n              id=\"c-modal-settings__check\"\n              name=\"c-modal-settings__check\"\n              className=\"c-modal-settings__check\"\n              value=\"hex\"\n              defaultChecked={session.settings.hex.checked}\n              readOnly\n              onClick={() => {\n                setSession({\n                  ...session,\n                  settings: {\n                    ...settings,\n                    hex: { checked: !settings.hex.checked }\n                  }\n                })\n              }} />\n          </div>\n\n          <div className=\"c-modal-settings__settings-group\">\n            <label className=\"c-modal-settings__label\" htmlFor=\"c-modal-settings__check-rgb\">RGB</label>\n            <input type=\"checkbox\"\n              id=\"c-modal-settings__check\"\n              name=\"c-modal-settings__check\"\n              className=\"c-modal-settings__check\"\n              value=\"hex\"\n              disabled\n              defaultChecked={session.settings.rgb.checked}\n              onClick={() => {\n                setSession({\n                  ...session,\n                  settings: {\n                    ...settings,\n                    rgb: { checked: !settings.rgb.checked }\n                  }\n                })\n              }} />\n          </div>\n\n          <h3 className=\"c-heading c-heading--h2\">Generate Colors from Sass Vars</h3>\n          <div className=\"c-modal-settings__generate\">\n            <h3 className=\"c-heading c-heading--h3\">\n              Sass color variables:\n            </h3>\n            <p className=\"c-subheading\">\n              $color-light-black: #262f2f;<br />\n              {/* $color-gray: rgba(235, 239, 242, 0.5);<br /> */}\n              $color-pure-gray: #969da0;<br />\n              $color-light-gray: #e0e7eb;<br />\n            </p>\n\n            {/* <h3 className=\"c-heading c-heading--h3\">\n              Query strings:\n            </h3>\n            <p className=\"c-subheading\">\n              turquoise=1abc9c&emerald=2ecc71&carrot=e67e22&alizarin=e74c3c&amethyst=9b59b6&\n            </p>\n\n            <h3 className=\"c-heading c-heading--h3\">Comma seperated</h3>\n            <p className=\"c-subheading\">\n              turquoise=1abc9c,<br />\n              emerald=2ecc71,<br />\n              carrot=#e67e22,<br />\n              alizarin=#e74c3c,<br />\n              amethyst=9b59b6\n            </p> */}\n\n            <textarea className=\"c-modal-settings__generate-text-area\"\n              placeholder=\"Paste colors:\"\n              ref={colorsTextArea}\n            ></textarea>\n            <button className=\"c-button c-modal-settings__generate-button\"\n              onClick={handleGenerateClick}\n            >Generate</button>\n          </div>\n        </div>\n      </div>\n    </Modal >\n  );\n}\n\nexport default ModalSettings;\n","/**\n * Converts a single rgb value to hex\n *\n * @param {c} string Color value\n * @return {string}\n */\nexport const componentToHex = (c) => {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\n/**\n * Creates hex string from rgb values\n *\n * @param {r} string Red value\n * @param {g} string Green value\n * @param {b} string Blue value\n * @return {string}\n */\nexport const rgbToHex = (r, g, b) => {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\n/**\n * Parses rgb string for values\n *\n * @param {rgb} string rgb value\n * @return {string}\n */\nexport const hexFromRGB = (rgb) => {\n  rgb = rgb.slice(4, rgb.length - 1);\n\n  let comma = rgb.indexOf(',');\n  const r = parseInt(rgb.substring(0, comma));\n\n  rgb = rgb.slice(comma + 2, rgb.length);\n  comma = rgb.indexOf(',');\n  const g = parseInt(rgb.substring(0, comma));\n\n  rgb = rgb.slice(comma + 2, rgb.length);\n  const b = parseInt(rgb.substring(0, rgb.length));\n\n  return rgbToHex(r, g, b);\n}\n\nexport const hexMatch = (hexValue) => {\n  return hexValue.match(/[^#]+(?=;)/g);\n}\n\nexport const rgbMatch = (rgbValue) => {\n  return rgbValue.match(/[^:]+(?=;)/g);\n}\n\nexport const hexOrRgbMatch = (hexValue) => {\n  return hexValue.match(/[^:|#]+(?=;)/g);\n};\n\nexport const sassVarMatch = (sassVar) => {\n  return sassVar.match(/[^$]+(?=:)/g);\n}\n","/**\n  * @function replaceURLState\n  * @params params - Object\n  * @description Helper function to push state to url\n  */\nexport const replaceURLState = (params) => {\n  params.toString();\n  window.history.replaceState({}, '', decodeURIComponent(`${window.location.pathname}?${params}`));\n};\n\n","import React, { useEffect, useState } from 'react';\nimport Nav from './components/Nav/Nav';\nimport ColorCell from './components/ColorCell/ColorCell';\nimport ModalSettings from './components/Modals/ModalSettings'\nimport { colorObj, constructColor, sortColorsByHue } from './components/ColorCell/ColorSort';\nimport { fallbackCopyTextToClipboard } from './components/Utils/Utils';\n\nexport const ColorSorter = ({ ...props }) => {\n  const previousSession = props;\n  const [urlParams, setUrlParams] = useState([]);\n  const [colorsArray, setColorsArray] = useState([]);\n  const [clipboardColor, setClipboardColor] = useState();\n  const [colorsHistory, setColorsHistory] = useState([]);\n  const [session, setSession] = useState(previousSession);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [isCopyActive, setIsCopyActive] = useState(false);\n  const isCopyActiveClass = isCopyActive === true ? ' is-shown' : '';\n\n  useEffect(() => {\n    setUrlParams(new URLSearchParams(window.location.search));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('color-sorter', JSON.stringify(session));\n  }, [session]);\n\n  useEffect(() => {\n    let formattedColors = [];\n\n    urlParams.forEach((value, key) => {\n      let color = colorObj(value, key);\n      formattedColors.push(constructColor(color));\n    });\n\n    formattedColors = sortColorsByHue(formattedColors);\n\n    setColorsArray(formattedColors);\n  }, [urlParams]);\n\n  useEffect(() => {\n    if (clipboardColor) {\n      copyText(clipboardColor.hexVal);\n    }\n  }, [clipboardColor])\n\n  const animateCopiedText = () => {\n    setIsCopyActive(true);\n    setTimeout(() => {\n      setIsCopyActive(false);\n    }, 800);\n  }\n\n  const updateColorsHistory = () => {\n    const tempColorsHistory = [...colorsHistory];\n    tempColorsHistory.push(clipboardColor);\n    setColorsHistory(tempColorsHistory);\n  }\n\n  const copyText = (text) => {\n    if (!navigator.clipboard) {\n      fallbackCopyTextToClipboard(text);\n      animateCopiedText();\n      updateColorsHistory();\n    }\n    navigator.clipboard.writeText(text).then(function () {\n      console.log('copied: ', text);\n      animateCopiedText();\n      updateColorsHistory();\n    }, function (err) {\n      alert('Async: Could not copy text: ', err);\n    });\n  };\n\n  return (\n    <main className={`c-color-sorter${isSettingsModalOpen ? ' is-blurred' : ''}`}>\n      <ModalSettings\n        isSettingsModalOpen={isSettingsModalOpen}\n        setIsSettingsModalOpen={setIsSettingsModalOpen}\n        session={session}\n        setSession={setSession}\n        setUrlParams={setUrlParams}\n      />\n      <div className={`c-color-copy${isCopyActiveClass} l-flex l-absolute-center`}\n        style={{\n          backgroundColor: clipboardColor && `#${clipboardColor.hexVal}`,\n        }} >\n        <span className=\"c-color-copy__value-container l-flex l-absolute-center\">\n          <p className=\"c-color-copy__value\">{clipboardColor && clipboardColor.hexVal}</p>\n        </span>\n      </div>\n      <Nav colorsHistory={colorsHistory}\n        setClipboardColor={setClipboardColor}\n        setIsSettingsModalOpen={setIsSettingsModalOpen} />\n      <div className=\"c-color-grid l-flex\">\n        {colorsArray && colorsArray.map((color, i) => {\n          return <ColorCell\n            color={color}\n            setClipboardColor={setClipboardColor}\n            key={i} />\n        })}\n      </div>\n    </main>\n  );\n}\n\nexport default ColorSorter;\n","export const colorObj = (hexVal, name) => {\n  return {\n    hexVal,\n    name,\n  }\n};\n\nexport const constructColor = (colorObj) => {\n  let { hexVal } = colorObj;\n  /* Get the RGB values to calculate the Hue. */\n  var r = colorObj.r || parseInt(hexVal.substring(0, 2), 16) / 255;\n  var g = colorObj.g || parseInt(hexVal.substring(2, 4), 16) / 255;\n  var b = colorObj.b || parseInt(hexVal.substring(4, 6), 16) / 255;\n\n  /* Getting the Max and Min values for Chroma. */\n  var max = Math.max.apply(Math, [r, g, b]);\n  var min = Math.min.apply(Math, [r, g, b]);\n\n  /* Variables for HSV value of hex color. */\n  var chr = max - min;\n  var hue = 0;\n  var val = max;\n  var sat = 0;\n\n  if (val > 0) {\n    /* Calculate Saturation only if Value isn't 0. */\n    sat = chr / val;\n    if (sat > 0) {\n      if (r == max) {\n        hue = 60 * (((g - min) - (b - min)) / chr);\n        if (hue < 0) {\n          hue += 360;\n        }\n      } else if (g == max) {\n        hue = 120 + 60 * (((b - min) - (r - min)) / chr);\n      } else if (b == max) {\n        hue = 240 + 60 * (((r - min) - (g - min)) / chr);\n      }\n    }\n  }\n  colorObj.chroma = chr;\n  colorObj.hue = hue;\n  colorObj.sat = sat;\n  colorObj.val = val;\n  colorObj.luma = 0.3 * r + 0.59 * g + 0.11 * b;\n  colorObj.red = parseInt(hexVal.substring(0, 2), 16);\n  colorObj.green = parseInt(hexVal.substring(2, 4), 16);\n  colorObj.blue = parseInt(hexVal.substring(4, 6), 16);\n  // colorObj.rgb =\n  return colorObj;\n};\n\nexport const sortColorsByHue = (colors) => {\n  return colors.sort(function (a, b) {\n    return a.hue - b.hue;\n  });\n};\n","/**\n * Finds an HTML element in the DOM\n *\n * @param {NodeList} css The CSS attribute to base the search from\n * @param {Function} parent A parent HTML element to limit scope of the selector\n */\nexport const $ = (css, parent) => (parent || document).querySelector(css);\n\n/**\n * Selects an array of elements from the document and\n * converts to an array if the first parameter is not a Node List.\n * Otherwise, converts a Node List to an Array.\n *\n * @param {String} css CSS class or attribute selector.\n * @param {String} parent Parent element or document if none provided.\n * @return {Array}\n */\nexport const $$ = (css, parent) => {\n  let nodes = css;\n  if (typeof css === 'string') {\n    nodes = (parent || document).querySelectorAll(css);\n  }\n  return Array.prototype.slice.call(nodes, 0);\n};\n\n/**\n * Shorthand for traversing node lists\n *\n * @param {NodeList} array The NodeList to traverse\n * @param {Function} callback A callback function to return\n */\nexport const nodeEach = (array, callback) => [].forEach.call(array, callback);\n\n/**\n * Creates JS event listeners through CSS classes\n *\n * @param {NodeList} eventName The event that should be fired\n * @param {Function} className The class to listen to for changes\n * @param {Function} callback A callback function to return\n */\nexport const addClassListener = (eventName, className, callback) => {\n  const elements = $$(className);\n  if (elements && elements.length > 0) {\n    elements.forEach((element) => {\n      element.addEventListener(eventName, (event) => {\n        if (callback) { callback(event); }\n      }, false);\n    });\n  }\n};\n\n/**\n * Get cookie by name\n */\nexport const getCookie = (name) => {\n  const v = document.cookie.match(`(^|;) ?${name}=([^;]*)(;|$)`);\n  return v ? v[2] : null;\n};\n\nexport const fallbackCopyTextToClipboard = (text) => {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.css';\nimport './styles/main.scss';\nimport ColorSorter from './ColorSorter';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport initialState from './initialState';\n\nconst previousSession = JSON.parse(localStorage.getItem('color-sorter')) || initialState;\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <ColorSorter {...previousSession} />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n  localStorageName: 'color-sorter',\n  settings: {\n    hex: {\n      checked: true,\n    },\n    rgb: {\n      checked: false,\n    },\n  },\n  lastSession: {}\n};\n"],"sourceRoot":""}