{"version":3,"sources":["components/Nav/NavHistoryColor.js","components/Nav/Nav.js","components/ColorCell/ColorCell.js","components/Modals/ModalSettingsCopyType.js","components/Modals/ModalSettingsDisplayType.js","components/ColorCell/ColorRegEx.js","components/ColorCell/ColorSort.js","components/Modals/ModalSettings.js","ColorSorter.js","components/Utils/URL.js","components/Utils/Utils.js","serviceWorker.js","index.js","initialState.js"],"names":["NavHistoryColor","props","setClipboardColor","color","className","style","backgroundColor","hex","onClick","Nav","colorsHistory","setIsSettingsModalOpen","session","map","i","key","href","target","colors","length","text","obj","name","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","ColorCell","displaySettings","settings","checked","rgb","hsl","Modal","setAppElement","ModalSettingsCopyType","disabled","handleClick","displayName","defaultChecked","Fragment","htmlFor","type","id","value","ModalSettingsDisplayType","colorRegEx","constructColor","colorObj","Chroma","Math","round","ModalSettings","isSettingsModalOpen","setSession","setColorsArray","colorsTextArea","useRef","isOpen","overlay","contentLabel","copy","placeholder","ref","current","trim","split","colorsArr","colorValue","replace","match","regExValue","matched","push","ColorSorter","previousSession","useState","URLSearchParams","window","location","search","urlParams","setUrlParams","colorsArray","formattedColors","setFormattedColors","clipboardColor","setColorsHistory","isCopyActive","setIsCopyActive","isCopyActiveClass","useEffect","initialColorsArray","forEach","temp","sort","firstBy","a","b","thenBy","params","set","toString","history","replaceState","decodeURIComponent","pathname","localStorage","setItem","JSON","stringify","copyText","navigator","clipboard","textArea","focus","select","msg","execCommand","console","log","err","error","fallbackCopyTextToClipboard","writeText","then","alert","setTimeout","Boolean","hostname","parse","getItem","localStorageName","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cf5a8684.chunk.js","sourcesContent":["import React from 'react';\n\nexport const NavHistoryColor = ({ ...props }) => {\n  const { setClipboardColor, color } = props;\n\n  const handleColorClick = () => {\n    setClipboardColor(color);\n  }\n\n  return (\n    <li className=\"nav__li nav__color\"\n      style={{\n        backgroundColor: `${color.hex}`,\n      }}\n      onClick={handleColorClick} >\n      {color.hex}\n    </li>\n  );\n}\n\nexport default NavHistoryColor;\n","import React from 'react';\nimport NavHistoryColor from './NavHistoryColor';\n\nexport const Nav = ({ ...props }) => {\n  const { setClipboardColor, colorsHistory, setIsSettingsModalOpen, session } = props;\n\n  const handleSettingsClick = () => {\n    setIsSettingsModalOpen(true);\n  };\n\n  const handleDownloadClick = () => {\n    const colors = session && session.colors;\n    if (colors && colors.length > 0) {\n      const text = colors.map((obj) => {\n        return `${obj.name}:${obj.hex}`;\n      });\n\n      let element = document.createElement('a');\n      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n      element.setAttribute('download', 'colors.txt');\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      document.body.removeChild(element);\n    }\n  };\n\n  return (\n    <nav className=\"nav l-flex l-align-center\">\n      <ul className=\"nav__ul l-flex\">\n        {colorsHistory && colorsHistory.map((color, i) => {\n          return <NavHistoryColor\n            key={i}\n            color={color}\n            setClipboardColor={setClipboardColor}\n          />\n        })}\n        <li className=\"nav__li nav__li--no-border nav__li--left-auto\">\n          <a href=\"https://github.com/RyanPiv/color-sorter\" target=\"_blank\" className=\"nav__li-icon nav__li-icon--github\"></a>\n        </li>\n        <li className=\"nav__li nav__li--no-border\" onClick={handleDownloadClick}>\n          <i className=\"nav__li-icon nav__li-icon--download\"></i>\n        </li>\n        <li className=\"nav__li nav__li--no-border\" onClick={handleSettingsClick}>\n          <i className=\"nav__li-icon nav__li-icon--settings\"></i>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nexport const ColorCell = ({ ...props }) => {\n  const { color, setClipboardColor, session } = props;\n  const displaySettings = session.settings.display;\n\n  const handleClick = () => {\n    setClipboardColor(color);\n  }\n\n  return (\n    <li className=\"c-color-grid__item l-flex l-absolute-center\"\n      onClick={handleClick}\n      style={{\n        backgroundColor: `${color.hex}`,\n      }}>\n      <span className=\"c-color-grid__item-text\">{color.name}</span>\n      {displaySettings.hex.checked &&\n        <span className=\"c-color-grid__item-text\">{color.hex}</span>\n      }\n      {displaySettings.rgb.checked &&\n        <span className=\"c-color-grid__item-text\">RGB({color.rgb && `${color.rgb[0]}, ${color.rgb[1]}, ${color.rgb[2]}`})</span>\n      }\n      {displaySettings.hsl.checked &&\n        <span className=\"c-color-grid__item-text\">HSL({color.hsl && `${color.hsl[0]},\\n${color.hsl[1]}%,\\n${color.hsl[2]}%,\\n${color.hsl[3]}`})</span>\n      }\n    </li >\n  );\n}\n\nexport default ColorCell;\n","import React from 'react';\nimport Modal from 'react-modal';\n\nModal.setAppElement('#root');\n\nexport const ModalSettingsCopyType = ({ ...props }) => {\n  const { disabled, handleClick, displayName, defaultChecked } = props;\n\n  return (\n    <React.Fragment>\n      <div className=\"c-modal-settings__settings-group\">\n        <label className=\"c-modal-settings__label\" htmlFor={`c-modal-settings__check-copy-${displayName}`}>{displayName}</label>\n        <input type=\"checkbox\"\n          id={`c-modal-settings__copy-check-${displayName}`}\n          name={`c-modal-settings__copy-check-${displayName}`}\n          className=\"c-modal-settings__check\"\n          value=\"rgb\"\n          disabled={disabled}\n          defaultChecked={defaultChecked}\n          onClick={handleClick} />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default ModalSettingsCopyType;\n","import React from 'react';\nimport Modal from 'react-modal';\n\nModal.setAppElement('#root');\n\nexport const ModalSettingsDisplayType = ({ ...props }) => {\n  const { disabled, handleClick, displayName, defaultChecked } = props;\n\n  return (\n    <React.Fragment>\n      <div className=\"c-modal-settings__settings-group\">\n        <label className=\"c-modal-settings__label\" htmlFor={`c-modal-settings__check-${displayName}`}>{displayName}</label>\n        <input type=\"checkbox\"\n          id={`c-modal-settings__check-${displayName}`}\n          name={`c-modal-settings__check-${displayName}`}\n          className=\"c-modal-settings__check\"\n          value=\"rgb\"\n          disabled={disabled}\n          defaultChecked={defaultChecked}\n          onClick={handleClick} />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default ModalSettingsDisplayType;\n","/*\n  ORDER:\n  RGB\n  RGBA\n  HSL\n  HSL Alpha\n  HEX\n  HEX Alpha\n*/\n\nexport const colorRegEx = [\n  /^rgb\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){2}|((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s)){2})((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]))|((((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){2}|((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){2})(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%))\\)$/i,\n  /^rgba\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){3}))|(((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){3}))\\/\\s)((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i,\n  /^hsl\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)((,\\s?(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2}|(\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2})\\)$/i,\n  /^hsla\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)(((,\\s?(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2},\\s?)|((\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2}\\s\\/\\s))((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i,\n  /([\\da-f]{3}){1,2}$/i,\n  /([\\da-f]{4}){1,2}$/i,\n];\n","import Chroma from 'chroma-js';\nimport { firstBy } from \"thenby\";\n\nexport const constructColor = (colorObj) => {\n  const { color } = colorObj;\n  colorObj.hex = Chroma(color).hex();\n  colorObj.hsl = Chroma(color).hsl();\n  colorObj.rgb = Chroma(color).rgb();\n\n  colorObj.hsl[0] = Math.round(colorObj.hsl[0]) || 0;\n  colorObj.hsl[1] = Math.round(colorObj.hsl[1] * 100);\n  colorObj.hsl[2] = Math.round(colorObj.hsl[2] * 100);\n  return colorObj;\n};\n\nexport const sortColors = (colors) => {\n  return colors.sort(\n    firstBy((a, b) => {\n      return a.hsl[0] - b.hsl[0];\n    }).thenBy((a, b) => {\n      return a.hsl[1] - b.hsl[1];\n    }).thenBy((a, b) => {\n      return a.hsl[2] - b.hsl[2];\n    }).thenBy((a, b) => {\n      return a.hsl[3] - b.hsl[3];\n    })\n  )\n};\n","import React, { useRef } from 'react';\nimport Modal from 'react-modal';\nimport ModalSettingsCopyType from './ModalSettingsCopyType';\nimport ModalSettingsDisplayType from './ModalSettingsDisplayType';\nimport { colorRegEx } from '../ColorCell/ColorRegEx';\nimport { constructColor } from '../ColorCell/ColorSort';\n\nModal.setAppElement('#root');\n\nexport const ModalSettings = ({ ...props }) => {\n  const { isSettingsModalOpen, setIsSettingsModalOpen, session, setSession, setColorsArray } = props;\n  const { settings } = session;\n  const colorsTextArea = useRef();\n\n  const toggleModal = () => {\n    setIsSettingsModalOpen(!isSettingsModalOpen);\n  }\n\n  const handleGenerateClick = () => {\n    // Get text from field, trim space, split based on semicolon\n    const text = colorsTextArea.current.value.trim().split(/[\\n;]+/g);\n    let colorsArr = [];\n\n    text.map(colorValue => {\n      // Remove white space from string, match name based on : otherwise set name to the color\n      let color = colorValue.replace(/[\\n\\r]+/g, '').replace(/\\s+/g, '');\n      let name = color.match(/(.+?)(?=:)/g) ? color.match(/(.+?)(?=:)/)[0] : color;\n\n      // Loop through regex and attempt to match each color type\n      // Create color object when a match is found\n      for (const regExValue of colorRegEx) {\n        const matched = color.match(regExValue);\n        if (matched && matched.length > 0) {\n          colorsArr.push(\n            constructColor({ name, color: matched[0] })\n          );\n          break;\n        }\n      }\n    })\n\n    if (colorsArr.length > 0) {\n      setColorsArray(colorsArr);\n      setIsSettingsModalOpen(false);\n    }\n  }\n\n  return (\n    <Modal\n      isOpen={isSettingsModalOpen}\n      // onAfterOpen={afterOpenModal}s\n      // onRequestClose={closeModal}\n      style={{\n        overlay: {\n          backgroundColor: 'transparent',\n        }\n      }}\n      contentLabel=\"Example Modal\"\n      className=\"c-modal c-modal-settings\"\n    >\n      <div className=\"c-modal__overlay\">\n        <button className=\"c-modal__close-button\" onClick={toggleModal}>close</button>\n        <div className=\"c-modal__content-container\">\n          <h2 className=\"c-heading c-heading--h1\">Settings</h2>\n\n          <h3 className=\"c-heading c-heading--h2\">Color Type to Copy to Clipboard and Download As</h3>\n          <ModalSettingsCopyType\n            session={session}\n            disabled={true}\n            displayName=\"Hex\"\n            defaultChecked={session.settings.copy.hex.checked}\n            handleClick={() => {\n              setSession({\n                ...session,\n                settings: {\n                  ...settings,\n                  hex: { checked: !settings.copy.hex.checked }\n                }\n              })\n            }}\n          />\n          <ModalSettingsCopyType\n            session={session}\n            disabled={true}\n            displayName=\"RGB\"\n            defaultChecked={session.settings.copy.rgb.checked}\n            handleClick={() => {\n              setSession({\n                ...session,\n                settings: {\n                  ...settings,\n                  rgb: { checked: !settings.copy.rgb.checked }\n                }\n              })\n            }}\n          />\n          <ModalSettingsCopyType\n            session={session}\n            disabled={true}\n            displayName=\"HSL\"\n            defaultChecked={session.settings.copy.hsl.checked}\n            handleClick={() => {\n              setSession({\n                ...session,\n                settings: {\n                  ...settings,\n                  hsl: { checked: !settings.copy.hsl.checked }\n                }\n              })\n            }}\n          />\n\n          <h3 className=\"c-heading c-heading--h2\">Color Format to Display in Grid Cells</h3>\n          <ModalSettingsDisplayType\n            session={session}\n            disabled={false}\n            displayName=\"Hex\"\n            defaultChecked={session.settings.display.hex.checked}\n            handleClick={() => {\n              setSession({\n                ...session,\n                settings: {\n                  ...session.settings,\n                  display: {\n                    ...session.settings.display,\n                    hex: { checked: !settings.display.hex.checked }\n                  }\n                }\n              })\n            }}\n          />\n          <ModalSettingsDisplayType\n            session={session}\n            disabled={false}\n            displayName=\"RGB\"\n            defaultChecked={session.settings.display.rgb.checked}\n            handleClick={() => {\n              setSession({\n                ...session,\n                settings: {\n                  ...session.settings,\n                  display: {\n                    ...session.settings.display,\n                    rgb: { checked: !settings.display.rgb.checked }\n                  }\n                }\n              })\n            }}\n          />\n          <ModalSettingsDisplayType\n            session={session}\n            disabled={false}\n            displayName=\"HSL\"\n            defaultChecked={session.settings.display.hsl.checked}\n            handleClick={() => {\n              setSession({\n                ...session,\n                settings: {\n                  ...session.settings,\n                  display: {\n                    ...session.settings.display,\n                    hsl: { checked: !settings.display.hsl.checked }\n                  }\n                }\n              })\n            }}\n          />\n\n          <h3 className=\"c-heading c-heading--h2\">Generate Colors</h3>\n          <div className=\"c-modal-settings__generate\">\n            <ul>\n              <li>Must end each line with a semi-colon!</li>\n              <li>Names are not required</li>\n              <li>Create a color name with an equals sign, such as colorName=#fff</li>\n            </ul>\n            <h3 className=\"c-heading c-heading--h3\">Accepted formats: </h3>\n            <h3 className=\"c-heading c-heading--h3\">Sass color variables:</h3>\n            <p className=\"c-subheading\">\n              $color-light-black: #262f2f;<br />\n              $color-gray: rgba(235, 239, 242, 0.5);<br />\n            </p>\n            <h3 className=\"c-heading c-heading--h3\">Name Value Pairing</h3>\n            <p className=\"c-subheading\">\n              emerald=2ecc71;<br />\n              carrot=#e67e22;<br />\n            </p>\n            <h3 className=\"c-heading c-heading--h3\">Any Valid Hex of 3, 6 or 8 digits</h3>\n            <p className=\"c-subheading\">\n              hex=000;<br />\n              hexColorName=#1e1e1e;<br />\n              #00ff0088;<br />\n              #fff;<br />\n              fff;<br />\n            </p>\n            <h3 className=\"c-heading c-heading--h3\">HSL, RGB, RGBA</h3>\n            <p className=\"c-subheading\">\n              hslColor=hsl(195, 100 %, 50 %);<br />\n              rgb(0, 191, 255);<br />\n            </p>\n\n            {/* <h3 className=\"c-heading c-heading--h3\">\n              Query strings:\n            </h3>\n            <p className=\"c-subheading\">\n              turquoise=1abc9c&emerald=2ecc71&carrot=e67e22&alizarin=e74c3c&amethyst=9b59b6&\n            </p> */}\n\n            <textarea className=\"c-modal-settings__generate-text-area\"\n              placeholder=\"Paste colors:\"\n              ref={colorsTextArea}\n            ></textarea>\n            <button className=\"c-button c-modal-settings__generate-button\"\n              onClick={handleGenerateClick}\n            >Generate</button>\n          </div>\n        </div>\n      </div>\n    </Modal >\n  );\n}\n\nexport default ModalSettings;\n","import React, { useEffect, useState } from 'react';\nimport Nav from './components/Nav/Nav';\nimport ColorCell from './components/ColorCell/ColorCell';\nimport ModalSettings from './components/Modals/ModalSettings'\nimport { sortColors } from './components/ColorCell/ColorSort';\nimport { fallbackCopyTextToClipboard } from './components/Utils/Utils';\nimport { replaceURLState } from './components/Utils/URL';\nimport { constructColor } from './components/ColorCell/ColorSort';\n\nexport const ColorSorter = ({ ...props }) => {\n  const previousSession = props || {};\n  const [urlParams, setUrlParams] = useState(new URLSearchParams(window.location.search) || []);\n  const [colorsArray, setColorsArray] = useState(previousSession.colors || []);\n  const [formattedColors, setFormattedColors] = useState([]);\n  const [clipboardColor, setClipboardColor] = useState();\n  const [colorsHistory, setColorsHistory] = useState([]);\n  const [session, setSession] = useState(previousSession);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [isCopyActive, setIsCopyActive] = useState(false);\n  const isCopyActiveClass = isCopyActive === true ? ' is-shown' : '';\n\n  useEffect(() => {\n    const initialColorsArray = [];\n    urlParams.forEach((color, name) => {\n      const colorObj = constructColor({ name, color });\n      initialColorsArray.push(colorObj);\n    });\n    setColorsArray(initialColorsArray);\n  }, []);\n\n  /*\n    Change to ColorsArray:\n      formatColors()\n      setFormattedColors( [...formattedColors ])\n  */\n  useEffect(() => {\n    if (colorsArray.length > 0) {\n      const temp = [...colorsArray];\n      sortColors(temp);\n      setFormattedColors(temp);\n    }\n  }, [colorsArray]);\n\n  /*\n    Change to formattedColors:\n      abstract key value pairs\n      setUrlParams(params)\n      setSession(...session, session.colors)\n  */\n  useEffect(() => {\n    if (formattedColors) {\n      const params = new URLSearchParams();\n      formattedColors.forEach(value => {\n        const { color, name } = value;\n        params.set(name, color);\n      });\n\n      setSession({\n        ...session,\n        colors: formattedColors\n      });\n      setUrlParams(params);\n    }\n  }, [formattedColors]);\n\n  useEffect(() => {\n    replaceURLState(urlParams);\n  }, [urlParams]);\n\n  useEffect(() => {\n    localStorage.setItem('color-sorter', JSON.stringify(session));\n  }, [session]);\n\n  useEffect(() => {\n    if (clipboardColor) {\n      copyText(clipboardColor.hex);\n    }\n  }, [clipboardColor]); //eslint-disable-line react-hooks/exhaustive-deps\n\n  const animateCopiedText = () => {\n    setIsCopyActive(true);\n    setTimeout(() => {\n      setIsCopyActive(false);\n    }, 1400);\n  };\n\n  const copyText = (text) => {\n    if (!navigator.clipboard) {\n      fallbackCopyTextToClipboard(text);\n    }\n    navigator.clipboard.writeText(text).then(function () {\n    }, function (err) {\n      alert('Async: Could not copy text: ', err);\n      return\n    });\n    let temp = [...colorsHistory];\n    temp.push(clipboardColor);\n    setColorsHistory(temp);\n    animateCopiedText();\n  };\n\n  return (\n    <main className={`c-color-sorter${isSettingsModalOpen ? ' is-blurred' : ''}`}>\n      <ModalSettings\n        isSettingsModalOpen={isSettingsModalOpen}\n        setIsSettingsModalOpen={setIsSettingsModalOpen}\n        session={session}\n        setColorsArray={setColorsArray}\n        setSession={setSession}\n      />\n      <div className={`c-color-copy${isCopyActiveClass} l-flex l-absolute-center`}\n        style={{\n          backgroundColor: clipboardColor && `${clipboardColor.hex}`,\n        }} >\n        <span className=\"c-color-copy__value-container l-flex l-absolute-center\">\n          <p className=\"c-color-copy__value\">Copied: #{clipboardColor && clipboardColor.hex}</p>\n        </span>\n      </div>\n      <Nav colorsHistory={colorsHistory}\n        setClipboardColor={setClipboardColor}\n        setIsSettingsModalOpen={setIsSettingsModalOpen}\n        session={session} />\n      <ul className=\"c-color-grid\">\n        {formattedColors && formattedColors.map((color, i) => {\n          return <ColorCell\n            color={color}\n            setClipboardColor={setClipboardColor}\n            session={session}\n            key={i} />\n        })}\n        {formattedColors.length === 0 &&\n          <ColorCell\n            color={{\n              name: 'Try loading some colors by clicking the gear icon in the nav bar',\n              hex: '909090',\n            }}\n            setClipboardColor={() => { return; }}\n            session={session}\n          />\n        }\n      </ul>\n    </main>\n  );\n}\n\nexport default ColorSorter;\n","/**\n  * @function replaceURLState\n  * @params params - Object\n  * @description Helper function to push state to url\n  */\nexport const replaceURLState = (params) => {\n  params.toString();\n  window.history.replaceState({}, '', decodeURIComponent(`${window.location.pathname}?${params}`));\n};\n\n","/**\n * Finds an HTML element in the DOM\n *\n * @param {NodeList} css The CSS attribute to base the search from\n * @param {Function} parent A parent HTML element to limit scope of the selector\n */\nexport const $ = (css, parent) => (parent || document).querySelector(css);\n\n/**\n * Selects an array of elements from the document and\n * converts to an array if the first parameter is not a Node List.\n * Otherwise, converts a Node List to an Array.\n *\n * @param {String} css CSS class or attribute selector.\n * @param {String} parent Parent element or document if none provided.\n * @return {Array}\n */\nexport const $$ = (css, parent) => {\n  let nodes = css;\n  if (typeof css === 'string') {\n    nodes = (parent || document).querySelectorAll(css);\n  }\n  return Array.prototype.slice.call(nodes, 0);\n};\n\n/**\n * Shorthand for traversing node lists\n *\n * @param {NodeList} array The NodeList to traverse\n * @param {Function} callback A callback function to return\n */\nexport const nodeEach = (array, callback) => [].forEach.call(array, callback);\n\n/**\n * Creates JS event listeners through CSS classes\n *\n * @param {NodeList} eventName The event that should be fired\n * @param {Function} className The class to listen to for changes\n * @param {Function} callback A callback function to return\n */\nexport const addClassListener = (eventName, className, callback) => {\n  const elements = $$(className);\n  if (elements && elements.length > 0) {\n    elements.forEach((element) => {\n      element.addEventListener(eventName, (event) => {\n        if (callback) { callback(event); }\n      }, false);\n    });\n  }\n};\n\n/**\n * Get cookie by name\n */\nexport const getCookie = (name) => {\n  const v = document.cookie.match(`(^|;) ?${name}=([^;]*)(;|$)`);\n  return v ? v[2] : null;\n};\n\nexport const fallbackCopyTextToClipboard = (text) => {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.css';\nimport './styles/main.scss';\nimport ColorSorter from './ColorSorter';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport initialState from './initialState';\n\nconst previousSession = JSON.parse(localStorage.getItem('color-sorter')) || initialState;\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <ColorSorter {...previousSession} />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n  localStorageName: 'color-sorter',\n  settings: {\n    display: {\n      hex: {\n        checked: false,\n      },\n      rgb: {\n        checked: false,\n      },\n      hsl: {\n        checked: false,\n      },\n    },\n    copy: {\n      hex: {\n        checked: true,\n      },\n      rgb: {\n        checked: false,\n      },\n      hsl: {\n        checked: false,\n      },\n    }\n  },\n  colors: []\n};\n"],"sourceRoot":""}